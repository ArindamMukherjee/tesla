# -*- coding: utf-8 -*-
"""transferimageclassifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RE9dFIr6a_nAZ55H7ZGcgY7okKpjV-Yj
"""

from keras.layers import Input, Lambda, Dense, Flatten
from keras.models import Model
from keras.applications.inception_v3 import preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras

img_shape = [224, 224]

!pip install bing-image-downloader

!mkdir train_set

!mkdir test_set

from bing_image_downloader import downloader
downloader.download("lamborghini",limit=50,output_dir="train_set",adult_filter_off=True)

from bing_image_downloader import downloader
downloader.download("ducati",limit=50,output_dir="train_set",adult_filter_off=True)

from bing_image_downloader import downloader
downloader.download("lamborghini",limit=20,output_dir="test_set",adult_filter_off=True)

from bing_image_downloader import downloader
downloader.download("ducati",limit=20,output_dir="test_set",adult_filter_off=True)

from keras.applications.inception_v3 import InceptionV3

base_model = InceptionV3(input_shape=img_shape + [3], weights='imagenet', include_top=False)

for layer in base_model.layers:
  layer.trainable = False

final = Dense(2, activation='sigmoid')(Flatten()(base_model.output))

new_model = Model(inputs=base_model.input, outputs=final)

new_model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=['accuracy']
)

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('/content/train_set',
                                                 target_size = (224, 224),
                                                 batch_size = 32,
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory('/content/test_set',
                                            target_size = (224, 224),
                                            batch_size = 32,
                                            class_mode = 'categorical')

history = new_model.fit(training_set,validation_data=test_set,epochs=5)

class_name=['Ducati','Lamborghini']

class_name

import matplotlib.pyplot as plt
from keras.preprocessing import image
x=image.load_img("/content/duuc2.jfif",target_size=(224,224))
plt.imshow(x)

import numpy as np
from keras.applications.inception_v3 import preprocess_input,decode_predictions
x=image.img_to_array(x)
x.shape

x=np.expand_dims(x,axis=0)
x.shape

x = preprocess_input(x)
y = new_model.predict(x)
y

class_name

y=y.flatten()

print("Ducati",y[0]*100)
print("Lamborghini",y[1]*100)

new_model.save('imageclassifier.hdf5')
